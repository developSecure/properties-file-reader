<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="file-readerFlow" doc:id="6647a0fb-e12f-4a83-9f33-4a9592ea2199" >
		<http:listener doc:name="Listener" doc:id="c34ba3e2-c783-4b08-882c-9167943bc3ba" config-ref="HTTP_Listener_config" path="/read"/>
		<ee:transform doc:name="Transform Message" doc:id="9cc08c70-dfbb-4433-8a1b-7070ef31bc7c" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="fileNames" ><![CDATA[%dw 2.0
output application/json
---
["local-properties.yaml","dev-properties.yaml"]]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<set-variable value='#["b2b-foe-bidwh-system-api"]' doc:name="Set api name" doc:id="4a2a8f13-1049-40bd-b160-b0e0b5de25e1" variableName="apiName"/>
		<set-variable doc:name="Prepare var for summary properties results" doc:id="322c81c7-4ff7-4f17-b0c0-b000681a5758" variableName="sumResults" value="#[{} as Object]"/>
		<set-variable value="[]" doc:name="Prepare var for property keys" doc:id="b449ecdd-83e4-4485-9481-264d37b2ec0e" variableName="propKeys"/>
		<foreach doc:name="For Each" doc:id="b9e530e4-c50b-4111-9ebe-a34e87211f6b" collection="vars.fileNames">
			<file:read doc:name="Read" doc:id="4ef66f90-eb32-42ec-805f-d524b148e56f" config-ref="File_Config" path='#["config/" ++ payload]' outputMimeType="application/yaml" />
			<ee:transform doc:name="Convert yaml to json" doc:id="41cb995e-575e-4a83-aa46-95b970afdc94">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			<ee:transform doc:name="Get keys and values" doc:id="bcc68d3b-1abe-4c83-ae67-407b85347b22">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::util::Tree
---
payload mapLeafValues () -> {
	key: $$.selector joinBy ".",
	value: $
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			<ee:transform doc:name="Save keys to var" doc:id="e9a9920c-4133-47c0-826c-d0e09a2e36e4">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="propKeys"><![CDATA[%dw 2.0
output application/json
---
payload..key]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
			<ee:transform doc:name="Prepare property output structure" doc:id="2a6f3632-0306-4408-94de-7ea14da9061b">
			<ee:message>
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var fileName = attributes.fileName as String replace /\-[a-z]+?\.yaml/ with ""
var values = payload..value
---
'$fileName': vars.propKeys map {
	'$': values[$$]
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
			<ee:transform doc:name="Transform Message" doc:id="07fdf616-39bd-404b-b945-02bc891f25b2" >
				<ee:message >
				</ee:message>
				<ee:variables >
					<ee:set-variable variableName="sumResults" ><![CDATA[%dw 2.0
output application/json
---
vars.sumResults ++ payload]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
		</foreach>
		<ee:transform doc:name="Transform Message" doc:id="b979687d-5415-4c02-9c90-e63cefff416d" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var emptyRow = {
		"api name": "",
		"property full path": "",
		"description": "",
		"local value": "",
		"dev value": "",
		"qa value": "",
		"uat value": "",
		"prod value": ""
    }
---
properties: vars.sumResults.local map(value,index) -> {
	'api name': vars.apiName default "",
	'property full path': vars.propKeys[index],
	'description': "",
	'local value': value[0],
	'dev value': vars.sumResults.dev[index][0]
} ++ emptyRow]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="file-writerSubFlow" doc:id="31f13e27-b158-4176-ae49-02f71ce66cd1" name="file-writerSubFlow"/>
	</flow>
	<sub-flow name="file-writerSubFlow" doc:id="10f70933-6328-4a6a-8f61-faf0c708e568" >
		<ee:transform doc:name="Transform Message" doc:id="0157fc06-8a6f-4030-a3c0-7c677af37e39" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	Properties: flatten(vars.totalProperties)
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<file:write doc:name="write" doc:id="114c2c10-f541-4ae5-a948-ea6167202362" config-ref="File_Config" path='#["output.xlsx"]' >
			<file:content ><![CDATA[#[%dw 2.0 
output application/xlsx header=true
---
payload]]]></file:content>
		</file:write>
	</sub-flow>
	<flow name="folders-readerSubFlow" doc:id="089aff75-83e1-402b-9076-1601f063d7b4" >
		<http:listener doc:name="Listener" doc:id="81d55229-b19c-4c7d-b90f-fd289d8d481d" config-ref="HTTP_Listener_config" path="/folders" allowedMethods="GET"/>
		<set-variable value="#[[] as Array]" doc:name="Prepare var for all api properties result" doc:id="a307e4ce-3428-4f6f-a961-b38284955778" variableName="totalProperties" />
		<foreach doc:name="For Each" doc:id="55035f78-f72a-40d1-90b4-a459e8baabab" collection="#[p('projects.namelist') splitBy &quot;,&quot;]">
			<set-variable value='#[payload]' doc:name="Set api name" doc:id="e44fe169-cba2-4c99-bfcd-cb11c3d482e8" variableName="apiName" />
			<ee:transform doc:name="set file path" doc:id="d7f5890c-581f-4d60-9dc6-3df0e75759b5">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="filePath"><![CDATA[%dw 2.0
output application/json
---
payload ++ p('folder.path')]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
			<set-variable value="#[[] as Array]" doc:name="Prepare var for property keys" doc:id="423e739d-1f1d-4ca3-9ffc-01122ac35257" variableName="propKeys" />
			<set-variable value="#[{} as Object]" doc:name="Prepare var for summary properties results" doc:id="4c74e1cf-35c1-4568-9723-c0ebd6c2ace5" variableName="sumResults" />
			<foreach doc:name="For Each" doc:id="d6b7d338-ffdc-47ba-80a5-6327ef33f7e0" collection="#[p('property.fileList') splitBy &quot;,&quot;]">
			<set-variable value="#[payload]" doc:name="Set fileName" doc:id="c246c4a6-569f-47b1-b815-3db5eae2801c" variableName="fileName"/>
				<choice doc:name="Choice" doc:id="ee3077aa-f652-41a9-bf30-33291f34ecac">
					<when expression="#[matches(vars.fileName, /^[a-z]+?\-[a-z]+?\.yaml/)]">
						<file:read doc:name="Read" doc:id="5312427d-ede2-4a42-8ccc-22415a6804ae" config-ref="File_Config" path='#[vars.filePath ++ vars.fileName]' outputMimeType="application/yaml" />
						<ee:transform doc:name="Convert yaml to json" doc:id="29147578-6f5c-4490-90dc-ccbabec48d21" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<ee:transform doc:name="Get keys and values" doc:id="4cd6a038-1e81-44db-b889-bda2c5ad73a7" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Tree
---
payload mapLeafValues () -> {
	key: $$.selector joinBy ".",
	value: $
}]]></ee:set-payload>
							</ee:message>
						</ee:transform>
						<ee:transform doc:name="Save keys to var" doc:id="0fefa8c3-6817-46cd-bd39-9d5b7e1d8b8e">
									<ee:message />
									<ee:variables>
										<ee:set-variable variableName="propKeys"><![CDATA[%dw 2.0
output application/json
---
payload..key]]></ee:set-variable>
									</ee:variables>
								</ee:transform>
						<ee:transform doc:name="Prepare property output structure" doc:id="76b953e6-7b6c-433b-951a-c263d6a7d89b" >
							<ee:message >
								<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var fileName = vars.fileName replace /\-[a-z]+?\.yaml/ with ""
var values = payload..value
---
'$fileName': vars.propKeys map {
	key: $,
	value: values[$$]
}]]></ee:set-payload>
							</ee:message>
							<ee:variables />
						</ee:transform>
						<ee:transform doc:name="Transform Message" doc:id="fdfe2a8f-e0f2-4f14-884c-4ee8022297e7" >
							<ee:message />
							<ee:variables >
								<ee:set-variable variableName="sumResults" ><![CDATA[%dw 2.0
output application/json
---
vars.sumResults ++ payload]]></ee:set-variable>
							</ee:variables>
						</ee:transform>
				</when>
			</choice>
		</foreach>
			<ee:transform doc:name="Prepare payload for writing to xlsx file" doc:id="10c12c4a-309b-4a34-b35f-03d6e21f6233">
					<ee:message>
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var propKeysAll = vars.sumResults..key distinctBy (value) -> {"unique" : value}
var descriptions = ((p('descriptions') splitBy ",") map{arr: $ splitBy " - "}).arr
---
propKeysAll map(key,index) -> {
	'api name': vars.apiName default "",
	'property full path': propKeysAll[index],
	'description': (flatten(descriptions filter($[0] == propKeysAll[index])))[1] default "",
	'local value': (vars.sumResults.local filter($.key == propKeysAll[index]))[0].value default "",
	'dev value': (vars.sumResults.dev filter($.key == propKeysAll[index]))[0].value default "",
	'qa value': (vars.sumResults.qa filter($.key == propKeysAll[index]))[0].value default "",
	'uat value': (vars.sumResults.uat filter($.key == propKeysAll[index]))[0].value default "",
	'prod value': (vars.sumResults.prod filter($.key == propKeysAll[index]))[0].value default "" 
}]]></ee:set-payload>
					</ee:message>
				<ee:variables >
				</ee:variables>
				</ee:transform>
			<ee:transform doc:name="Transform Message" doc:id="04cd5df6-6419-4ce9-9d94-be6d02c7378c" >
				<ee:message >
					<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var emptyRow = [{
		"api name": ""
},
{
		"api name": ""
}]
---
payload ++ emptyRow]]></ee:set-payload>
				</ee:message>
			</ee:transform>
			<ee:transform doc:name="Transform Message" doc:id="e33104d7-4d92-4ba4-94aa-852ea758322c">
				<ee:message>
				</ee:message>
				<ee:variables>
					<ee:set-variable variableName="totalProperties"><![CDATA[%dw 2.0
output application/json
---
vars.totalProperties + payload]]></ee:set-variable>
				</ee:variables>
			</ee:transform>
		</foreach>
		<flow-ref doc:name="file-writerSubFlow" doc:id="5bdf2000-ba9c-4dfb-8c4d-7e18befe9f1b" name="file-writerSubFlow"/>
	</flow>
	<flow name="file-writerFlow" doc:id="b438a885-74cc-47c3-bda8-751db894d6de" >
		<http:listener doc:name="Listener" doc:id="e4f50fca-8991-426a-9f93-af1e22b0563f" config-ref="HTTP_Listener_config" path="/write" allowedMethods="POST"/>
		<ee:transform doc:name="Transform Message" doc:id="64259595-a9ba-4257-8448-5093a4d81605" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<file:write doc:name="Write" doc:id="e141d0c2-be90-4841-aff1-ed044fd2b824" path='#["output.xlsx"]' config-ref="File_Config">
			<file:content><![CDATA[#[%dw 2.0 
output application/xlsx header=true
---
payload]]]></file:content>
		</file:write>
	</flow>
	<flow name="file-list-readerFlow" doc:id="b3b09bb5-aa31-45ab-b68e-5c60f8bc6310" >
		<http:listener doc:name="Listener" doc:id="ad157f0d-d88e-4e65-bffb-f5fd298ecb93" config-ref="HTTP_Listener_config" path="/read-files" allowedMethods="GET"/>
		<ee:transform doc:name="Transform Message" doc:id="69565b64-d696-4342-a245-b282b8138b2a" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
//(payl.dev filter($.key == "api.version"))[0].value default ""
---
{
	dev:  p('descriptions')
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="Transform Message" doc:id="83ab4ed1-4b6b-48da-af56-28b60c6d983e" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="props" ><![CDATA[%dw 2.0
output application/json
---
[]]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<file:list doc:name="List" doc:id="2a15c91c-fdaf-4586-bc45-5a0db3ff0612" config-ref="File_Config_Test" directoryPath="config">
			<non-repeatable-iterable />
		</file:list>
		<foreach doc:name="For Each" doc:id="633c5a0e-7ec7-48c8-953c-228f844ee547" >
			<choice doc:name="Choice" doc:id="211b98b2-ae2e-445e-8a27-a13842248884" >
				<when expression="#[(not attributes.directory) and matches(attributes.fileName, /^[a-z]+?\-[a-z]+?\.yaml/)]">
					<ee:transform doc:name="Convert yaml to json" doc:id="b86f0fb3-93e7-46c5-b9b2-890ea0c37229">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0

output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
					<ee:transform doc:name="Transform Message" doc:id="7e8cbe37-73ce-4bc9-b457-e57b9bd2a866">
						<ee:message>
							<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<ee:transform doc:name="Transform Message" doc:id="a30e7faf-e12e-431c-987e-be110f585c23">
						<ee:message>
							<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
read(payload,"application/json")]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<ee:transform doc:name="Transform Message" doc:id="9521d3a8-c41b-498a-b938-faa48c8b5ab6" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
import * from dw::util::Tree
---
payload mapLeafValues () -> {
	key: $$.selector joinBy ".",
	value: $
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<ee:transform doc:name="Transform Message" doc:id="44bbac24-4421-4592-9413-b66e7c33c968" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
var fileName = attributes.fileName as String
var values = payload..value
---
'$fileName': payload..key map {
	'$': values[$$]
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
				</when>
			</choice>
		</foreach>
	</flow>
</mule>
